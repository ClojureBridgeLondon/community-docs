- title: Hello Clojure World
  permalink: /docs/curriculum/
  todo: false

  # Basics of modelling information in Clojure using strings
- title: Who Am I
  permalink: /docs/curriculum/who-am-i
  todo: false

  # Basics of modelling information in Clojure using strings
- title: Whats In A Name
  permalink: /docs/curriculum/whats-in-a-name
  todo: false

  # Conditional logic, predicates and truthiness
- title: Making Decisions
  permalink: /docs/curriculum/making-decisions
  todo: false

  # Let function for local naming, plus cond and case functions
- title: Lets Not Make Excuses
  permalink: /docs/curriculum/lets-not-make-excuses
  todo: false

  # Common ways to access documentation and see the source code of functions
- title: Just The Docs
  permalink: /docs/curriculum/just-the-docs
  todo: false

  # Introducing the basics of Clojure Collections
- title: Clojure Collections Introduction
  permalink: /docs/curriculum/clojure-collections
  todo: false

  # Basics of modelling information in Clojure using strings
- title: Who Am I In Detail
  permalink: /docs/curriculum/who-am-i-in-detail
  todo: false

  # Collection - vector
- title: Collection - Vector
  permalink: /docs/curriculum/collection-vector
  todo: false

  # Basics of modeling Clojure using the persistent data structures (vectors)
- title: Who Are We
  permalink: /docs/curriculum/who-are-we
  todo: false

  # Defining slightly more complex collections - collections within collections
# - title: Making a Meal of it
#   permalink: /docs/curriculum/making-a-meal-of-it
#   todo: true

## Need to introduce maps before the great clojure bake off

  # Collection - map
- title: Collection - map
  permalink: /docs/curriculum/collection-map
  todo: false

  # Challenge to define the team using maps (and mix maps with vectors)
- title: We Are Groot
  permalink: /docs/curriculum/we-are-groot
  todo: false

  # Looking up data held in maps
- title: Looking up values in Maps
  permalink: /docs/curriculum/looking-up-values-in-maps
  todo: false

  # Defining a meal and recipe to demonstrate how to use collections within collections
- title: Great Clojure Bake Off
  permalink: /docs/curriculum/great-clojure-bake-off
  todo: false

  # Challenge to create a triple lock
- title: Triple Lock
  permalink: /docs/curriculum/triple-lock
  todo: false

# The basics of defining your own functions
- title: On Your Best Behaviour
  permalink: /docs/curriculum/on-your-best-behaviour
  todo: false

  # The basics of mathematical functions in Clojure
- title: The Numbers Do Add Up
  permalink: /docs/curriculum/the-numbers-do-add-up
  todo: true

 # The basics of working with data in collections, preparing for split-the-bill challenge
- title: Finding Averages
  permalink: /docs/curriculum/finding-averages
  todo: true

 # Changing data held in collections (maps, vectors, lists, etc)
- title: Changing who you are
  permalink: /docs/curriculum/changing-who-you-are
  todo: true

  # How to split the bill between all the people at a restaurant, start simple and then allow people to pay for just what they ordered
- title: Challenge Splitting the Bill
  permalink: /docs/curriculum/split-the-bill
  todo: true

 # Processing data based on decisions
- title: I like my Clojure Filtered
  permalink: /docs/curriculum/i-like-my-clojure-filtered
  todo: true

  # Intermediate examples of Clojure functions and working with maps
- title: More Than Average
  permalink: /docs/curriculum/more-than-average
  todo: true

  # Challenge based around maps and assoc
- title: Strictly Clojure
  permalink: /docs/curriculum/strictly-clojure
  todo: true

  # Challenge based around maps and assoc
- title: Are you local?
  permalink: /docs/curriculum/are-you-local
  todo: true

  # Finding patterns in collections (pre-cursor to most common word challenge)
- title: Finding Patterns
  permalink: /docs/curriculum/finding-patterns
  todo: true

  # Find the most common word from a source of text (eg. works of shakespear, hhgttg)
- title: Most Common Word
  permalink: /docs/curriculum/most-common-word
  todo: true

  # Introducing mutable state
- title: Mutants arise
  permalink: /docs/curriculum/mutants-arise
  todo: true

  # Challenge using atoms and refs to help students understand mutable state
- title: Gambling Addiction
  permalink: /docs/curriculum/gambling-addiction
  todo: true

  # Examples of the Ration type and delaying calculations until you know the precision you want
- title: A Piece of Pie
  permalink: /docs/curriculum/a-piece-of-pie
  todo: true

  # Examples of lazy evaluation
- title: Keep Calm and stay lazy
  permalink: /docs/curriculum/keep-calm-and-stay-lazy
  todo: true


# Other topics
## Ratio types - dont count your chickens

# Advanced stuff...

# Its all types underneath - show that Clojure is built on some of the types of the hosted platform and things have a type, you just dont need to explicitly define them.

# Specifying with tests (eg. clojure.test - not sure if clojure.spec is supported with klipse)

# Something to demonstration the use of Java [optional]
